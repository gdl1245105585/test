`begin_keywords "1800-2017"
`line 1 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 1
 
 
 

`line 5 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
 
 
 
 
 

`line 11 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
 

`line 13 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
 
module axi_dma_burst_reshaper #(
     
    parameter int unsigned DataWidth   = -1,
     
    parameter int unsigned AddrWidth   = -1,
     
    parameter int unsigned IdWidth     = -1,
     
     
     
     
     
     
     
     
     
     
     
     
    parameter type         burst_req_t = logic,
     
     
     
     
     
     
     
     
     
     
     
     
     
    parameter type         read_req_t  = logic,
     
     
     
     
     
     
     
     
     
     
     
     
     
     
    parameter type         write_req_t = logic

`line 64 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
) (
     
    input logic       clk_i,
     
    input logic       rst_ni,
     
    input burst_req_t burst_req_i,

`line 72 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
    input  logic valid_i,
     
    output logic ready_o,

`line 77 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
    output write_req_t write_req_o,
     
    output read_req_t  read_req_o,

`line 82 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
    output logic r_valid_o,
     
    input  logic r_ready_i,
     
    output logic w_valid_o,
     
    input  logic w_ready_i
);

`line 92 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
  localparam int unsigned StrbWidth = DataWidth / 8;
  localparam int unsigned OffsetWidth = $clog2(StrbWidth);
  localparam int unsigned PageSize = (256 * StrbWidth > 4096) ? 4096 : 256 * StrbWidth;
  localparam int unsigned PageAddrWidth = $clog2(PageSize);
   
  typedef logic [OffsetWidth-1:0] offset_t;
   
  typedef logic [AddrWidth-1:0] addr_t;
   
  typedef logic [IdWidth-1:0] axi_id_t;

`line 103 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
   
  typedef struct packed {
    axi_id_t id;
    addr_t addr;
    addr_t num_bytes;
    axi_pkg::cache_t cache;
    axi_pkg::burst_t burst;
    logic valid;
  } burst_chan_t;

`line 113 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
   
  typedef struct packed {
    burst_chan_t src;
    burst_chan_t dst;
    offset_t shift;
    logic decouple_rw;
    logic deburst;
  } burst_decoupled_t;

`line 122 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
   
   
   
  burst_decoupled_t burst_d, burst_q;

`line 127 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
   
   
   
  logic [PageAddrWidth-1:0] r_page_offset;
  logic [PageAddrWidth : 0] r_num_bytes_to_pb;
  logic [PageAddrWidth-1:0] w_page_offset;
  logic [PageAddrWidth : 0] w_num_bytes_to_pb;
  logic [PageAddrWidth : 0] c_num_bytes_to_pb;

`line 136 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
  always_comb begin : proc_write_page_boundry_check
     
    if (burst_q.deburst) begin
       
       
      r_page_offset     = burst_q.src.addr[OffsetWidth-1:0];
       
      r_num_bytes_to_pb = (StrbWidth - r_page_offset) % (2 * StrbWidth);

`line 145 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
       
      w_page_offset     = burst_q.dst.addr[OffsetWidth-1:0];
       
      w_num_bytes_to_pb = (StrbWidth - w_page_offset) % (2 * StrbWidth);
    end else begin
       
       
      r_page_offset     = burst_q.src.addr[PageAddrWidth-1:0];
       
      r_num_bytes_to_pb = PageSize - r_page_offset;

`line 156 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
       
      w_page_offset     = burst_q.dst.addr[PageAddrWidth-1:0];
       
      w_num_bytes_to_pb = PageSize - w_page_offset;
    end
     
     
    c_num_bytes_to_pb = (r_num_bytes_to_pb > w_num_bytes_to_pb) ?
                             w_num_bytes_to_pb : r_num_bytes_to_pb;

`line 166 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
  end

`line 168 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
   
   
   
  logic [PageAddrWidth:0] r_num_bytes_possible;
  logic [PageAddrWidth:0] r_num_bytes;
  logic                   r_finish;
  logic [OffsetWidth-1:0] r_addr_offset;

`line 176 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
  logic [PageAddrWidth:0] w_num_bytes_possible;
  logic [PageAddrWidth:0] w_num_bytes;
  logic                   w_finish;
  logic [OffsetWidth-1:0] w_addr_offset;

`line 181 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
  always_comb begin : proc_read_write_transaction

`line 183 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
    burst_d = burst_q;

`line 186 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
     
     
     
    r_num_bytes_possible = (burst_q.decouple_rw == 1'b1) ? r_num_bytes_to_pb : c_num_bytes_to_pb;

`line 192 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
    if (burst_q.src.num_bytes > r_num_bytes_possible) begin
      r_num_bytes = r_num_bytes_possible;
       
      burst_d.src.num_bytes = burst_q.src.num_bytes - r_num_bytes_possible;
       
      r_finish = 1'b0;
       
      burst_d.src.addr      = (burst_q.src.burst == axi_pkg::BURST_INCR) ?
                                    burst_q.src.addr + r_num_bytes : burst_q.src.addr;

`line 203 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
       
       
    end else begin
      r_num_bytes = burst_q.src.num_bytes[PageAddrWidth:0];
       
      burst_d.src = '0;
       
      r_finish    = 1'b1;
    end

`line 213 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
    r_addr_offset        = burst_q.src.addr[OffsetWidth-1:0];

`line 216 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
    read_req_o.ar.addr   = {burst_q.src.addr[AddrWidth-1:OffsetWidth], {{OffsetWidth} {1'b0}}};
    read_req_o.ar.len    = ((r_num_bytes + r_addr_offset - 1) >> OffsetWidth);
    read_req_o.ar.size   = axi_pkg::size_t'(OffsetWidth);
    read_req_o.ar.id     = burst_q.src.id;
    read_req_o.ar.last   = r_finish;
    read_req_o.ar.burst  = burst_q.src.burst;
    read_req_o.ar.cache  = burst_q.src.cache;
    r_valid_o            = burst_q.decouple_rw ? burst_q.src.valid : burst_q.src.valid & w_ready_i;

`line 226 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
    read_req_o.r.offset  = r_addr_offset;
    read_req_o.r.tailer  = OffsetWidth'(r_num_bytes + r_addr_offset);
     
    read_req_o.r.shift   = burst_q.shift;

`line 232 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
     
     
     
    w_num_bytes_possible = (burst_q.decouple_rw == 1'b1) ? w_num_bytes_to_pb : c_num_bytes_to_pb;

`line 238 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
    if (burst_q.dst.num_bytes > w_num_bytes_possible) begin
      w_num_bytes = w_num_bytes_possible;
       
      burst_d.dst.num_bytes = burst_q.dst.num_bytes - w_num_bytes_possible;
       
      w_finish = 1'b0;
       
      burst_d.dst.addr      = (burst_q.dst.burst == axi_pkg::BURST_INCR) ?
                                     burst_q.dst.addr + w_num_bytes : burst_q.dst.addr;

`line 249 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
       
       
    end else begin
      w_num_bytes = burst_q.dst.num_bytes[PageAddrWidth:0];
       
      burst_d.dst = '0;
       
      w_finish    = 1'b1;
    end

`line 259 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
    w_addr_offset = burst_q.dst.addr[OffsetWidth-1:0];

`line 262 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
    write_req_o.aw.addr = {burst_q.dst.addr[AddrWidth-1:OffsetWidth], {{OffsetWidth} {1'b0}}};
    write_req_o.aw.len = ((w_num_bytes + w_addr_offset - 1) >> OffsetWidth);
    write_req_o.aw.size = axi_pkg::size_t'(OffsetWidth);
    write_req_o.aw.id = burst_q.dst.id;
     
    write_req_o.aw.last = w_finish;
    write_req_o.aw.burst = burst_q.dst.burst;
    write_req_o.aw.cache = burst_q.dst.cache;
    w_valid_o = burst_q.decouple_rw ? burst_q.dst.valid : burst_q.dst.valid & r_ready_i;

`line 273 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
    write_req_o.w.offset = w_addr_offset;
    write_req_o.w.tailer = OffsetWidth'(w_num_bytes + w_addr_offset);
    write_req_o.w.num_beats = write_req_o.aw.len;
     
    write_req_o.w.is_single = (write_req_o.aw.len == '0);

`line 280 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
     
     
    ready_o = r_finish & w_finish & valid_i & r_ready_i & w_ready_i;

`line 285 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
     
     
     
     
    if (ready_o) begin
       
      burst_d.src.id        = burst_req_i.id;
      burst_d.src.addr      = burst_req_i.src;
      burst_d.src.num_bytes = burst_req_i.num_bytes;
      burst_d.src.cache     = burst_req_i.cache_src;
      burst_d.src.burst     = burst_req_i.burst_src;
       
      burst_d.src.valid     = (burst_req_i.num_bytes == '0) ? 1'b0 : valid_i;

`line 299 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
      burst_d.dst.id        = burst_req_i.id;
      burst_d.dst.addr      = burst_req_i.dst;
      burst_d.dst.num_bytes = burst_req_i.num_bytes;
      burst_d.dst.cache     = burst_req_i.cache_dst;
      burst_d.dst.burst     = burst_req_i.burst_dst;
       
      burst_d.dst.valid     = (burst_req_i.num_bytes == '0) ? 1'b0 : valid_i;

`line 307 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
      burst_d.decouple_rw   = burst_req_i.decouple_rw;
      burst_d.deburst       = burst_req_i.deburst;
       
      burst_d.shift         = burst_req_i.src[OffsetWidth-1:0] - burst_req_i.dst[OffsetWidth-1:0];

`line 312 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
       
       
 
            
                        
        
            
                        
        

`line 322 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
       
    end
  end

`line 326 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 0
   
   
   
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      burst_q.decouple_rw <= '0;
      burst_q.deburst     <= '0;
      burst_q.shift       <= '0;
      burst_q.src         <= '0;
      burst_q.dst         <= '0;
    end else begin
      burst_q.decouple_rw <= burst_d.decouple_rw;
      burst_q.deburst     <= burst_d.deburst;
      burst_q.shift       <= burst_d.shift;
       
      if (burst_d.decouple_rw) begin
        if (r_ready_i) burst_q.src <= burst_d.src;
        if (w_ready_i) burst_q.dst <= burst_d.dst;
      end else begin
        if (r_ready_i & w_ready_i) burst_q.src <= burst_d.src;
        if (w_ready_i & r_ready_i) burst_q.dst <= burst_d.dst;
      end
    end
  end
endmodule : axi_dma_burst_reshaper

`line 352 "/repo/hw/ip/future/src/dma/axi_dma_burst_reshaper.sv" 2
